import discord
import youtube_dl
import spotdl
import requests
from time import sleep
from discord.utils import get
from discord.ext import commands



class Dancin(commands.Cog):
    def __init__(self, bot: commands.Bot) -> None:
        self.bot = bot

        self.ytdl_format_options = {
            'format': 'bestaudio/best',
            'restrictfilenames': True,
            'noplaylist': True,
            'nocheckcertificate': True,
            'ignoreerrors': False,
            'logtostderr': False,
            'quiet': True,
            'no_warnings': True,
            'default_search': 'auto',
            'source_address': '0.0.0.0'
        }

        self.ffmpeg_options = {
            'before_options': '-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5',
            'options': '-vn'
        }


    #### join vc ####
    @commands.command(aliases=['voice', 'vc'])
    @commands.guild_only()
    async def join(self, ctx: commands.Context):
        voice_client = get(self.bot.voice_clients, guild=ctx.guild)

        # checking if connected already
        if voice_client and voice_client.is_connected():
            await ctx.reply(f'I\'m already connected to {ctx.author.voice.channel.mention}')

        # if user not connected
        elif ctx.author.voice is None:
            await ctx.reply(f'You\'re not in a voice channel')

        else:
            # getting user's voice channel
            channel = ctx.author.voice.channel

            # connecting to the voice channel
            await channel.connect()

            # calling play command
            # await ctx.invoke(self.bot.get_command('play'))


    #### leave vc ####
    @commands.command(aliases=['disconnect'])
    @commands.guild_only()
    async def leave(self, ctx: commands.Context):
        voice_client = get(self.bot.voice_clients, guild=ctx.guild)

        # if connected to any voice channel then leave
        if voice_client and voice_client.is_connected():
            await ctx.voice_client.disconnect()


    #### play ####
    @commands.command()
    @commands.guild_only()
    async def play(self, ctx: commands.Context, url: str='https://www.youtube.com/watch?v=gnZImHvA0ME'):
        ctx.voice_client.stop()
        voice_client = ctx.voice_client

        with youtube_dl.YoutubeDL(self.ytdl_format_options) as ydl:
            info = ydl.extract_info(url, download=False)
            url2 = info['format'][0]['url']
            source = await discord.FFmpegOpusAudio.from_probe(url2, **self.ffmpeg_options)
            voice_client.play()


    #### pause ####
    @commands.command()
    @commands.guild_only()
    async def resume(self, ctx: commands.Context):
        voice_client = get(self.bot.voice_clients, guild=ctx.guild)
        if voice_client.is_paused():
            voice_client.resume()


    #### resume ####
    @commands.command()
    @commands.guild_only()
    async def pause(self, ctx: commands.Context):
        voice_client = get(self.bot.voice_clients, guild=ctx.guild)
        if voice_client.is_playing():
            voice_client.pause()


    #### stop ####
    @commands.command()
    @commands.guild_only()
    async def stop(self, ctx: commands.Context):
        voice_client = get(self.bot.voice_clients, guild=ctx.guild)
        voice_client.stop()


    @join.error
    async def join_error(self, ctx: commands.Context, error):
        # AttributeError
        pass


    @play.error
    async def play_error(self, ctx: commands.Context, error):
        pass



def setup(bot: commands.Bot) -> None:
    bot.add_cog(Dancin(bot))
